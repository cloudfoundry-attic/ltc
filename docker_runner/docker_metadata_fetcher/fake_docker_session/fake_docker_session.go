// This file was generated by counterfeiter
package fake_docker_session

import (
	"sync"

	"github.com/cloudfoundry-incubator/ltc/docker_runner/docker_metadata_fetcher"
	"github.com/docker/docker/registry"
)

type FakeDockerSession struct {
	GetRepositoryDataStub        func(remote string) (*registry.RepositoryData, error)
	getRepositoryDataMutex       sync.RWMutex
	getRepositoryDataArgsForCall []struct {
		remote string
	}
	getRepositoryDataReturns struct {
		result1 *registry.RepositoryData
		result2 error
	}
	GetRemoteTagsStub        func(registries []string, repository string) (map[string]string, error)
	getRemoteTagsMutex       sync.RWMutex
	getRemoteTagsArgsForCall []struct {
		registries []string
		repository string
	}
	getRemoteTagsReturns struct {
		result1 map[string]string
		result2 error
	}
	GetRemoteImageJSONStub        func(imgID, registry string) ([]byte, int, error)
	getRemoteImageJSONMutex       sync.RWMutex
	getRemoteImageJSONArgsForCall []struct {
		imgID    string
		registry string
	}
	getRemoteImageJSONReturns struct {
		result1 []byte
		result2 int
		result3 error
	}
}

func (fake *FakeDockerSession) GetRepositoryData(remote string) (*registry.RepositoryData, error) {
	fake.getRepositoryDataMutex.Lock()
	fake.getRepositoryDataArgsForCall = append(fake.getRepositoryDataArgsForCall, struct {
		remote string
	}{remote})
	fake.getRepositoryDataMutex.Unlock()
	if fake.GetRepositoryDataStub != nil {
		return fake.GetRepositoryDataStub(remote)
	} else {
		return fake.getRepositoryDataReturns.result1, fake.getRepositoryDataReturns.result2
	}
}

func (fake *FakeDockerSession) GetRepositoryDataCallCount() int {
	fake.getRepositoryDataMutex.RLock()
	defer fake.getRepositoryDataMutex.RUnlock()
	return len(fake.getRepositoryDataArgsForCall)
}

func (fake *FakeDockerSession) GetRepositoryDataArgsForCall(i int) string {
	fake.getRepositoryDataMutex.RLock()
	defer fake.getRepositoryDataMutex.RUnlock()
	return fake.getRepositoryDataArgsForCall[i].remote
}

func (fake *FakeDockerSession) GetRepositoryDataReturns(result1 *registry.RepositoryData, result2 error) {
	fake.GetRepositoryDataStub = nil
	fake.getRepositoryDataReturns = struct {
		result1 *registry.RepositoryData
		result2 error
	}{result1, result2}
}

func (fake *FakeDockerSession) GetRemoteTags(registries []string, repository string) (map[string]string, error) {
	fake.getRemoteTagsMutex.Lock()
	fake.getRemoteTagsArgsForCall = append(fake.getRemoteTagsArgsForCall, struct {
		registries []string
		repository string
	}{registries, repository})
	fake.getRemoteTagsMutex.Unlock()
	if fake.GetRemoteTagsStub != nil {
		return fake.GetRemoteTagsStub(registries, repository)
	} else {
		return fake.getRemoteTagsReturns.result1, fake.getRemoteTagsReturns.result2
	}
}

func (fake *FakeDockerSession) GetRemoteTagsCallCount() int {
	fake.getRemoteTagsMutex.RLock()
	defer fake.getRemoteTagsMutex.RUnlock()
	return len(fake.getRemoteTagsArgsForCall)
}

func (fake *FakeDockerSession) GetRemoteTagsArgsForCall(i int) ([]string, string) {
	fake.getRemoteTagsMutex.RLock()
	defer fake.getRemoteTagsMutex.RUnlock()
	return fake.getRemoteTagsArgsForCall[i].registries, fake.getRemoteTagsArgsForCall[i].repository
}

func (fake *FakeDockerSession) GetRemoteTagsReturns(result1 map[string]string, result2 error) {
	fake.GetRemoteTagsStub = nil
	fake.getRemoteTagsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeDockerSession) GetRemoteImageJSON(imgID string, registry string) ([]byte, int, error) {
	fake.getRemoteImageJSONMutex.Lock()
	fake.getRemoteImageJSONArgsForCall = append(fake.getRemoteImageJSONArgsForCall, struct {
		imgID    string
		registry string
	}{imgID, registry})
	fake.getRemoteImageJSONMutex.Unlock()
	if fake.GetRemoteImageJSONStub != nil {
		return fake.GetRemoteImageJSONStub(imgID, registry)
	} else {
		return fake.getRemoteImageJSONReturns.result1, fake.getRemoteImageJSONReturns.result2, fake.getRemoteImageJSONReturns.result3
	}
}

func (fake *FakeDockerSession) GetRemoteImageJSONCallCount() int {
	fake.getRemoteImageJSONMutex.RLock()
	defer fake.getRemoteImageJSONMutex.RUnlock()
	return len(fake.getRemoteImageJSONArgsForCall)
}

func (fake *FakeDockerSession) GetRemoteImageJSONArgsForCall(i int) (string, string) {
	fake.getRemoteImageJSONMutex.RLock()
	defer fake.getRemoteImageJSONMutex.RUnlock()
	return fake.getRemoteImageJSONArgsForCall[i].imgID, fake.getRemoteImageJSONArgsForCall[i].registry
}

func (fake *FakeDockerSession) GetRemoteImageJSONReturns(result1 []byte, result2 int, result3 error) {
	fake.GetRemoteImageJSONStub = nil
	fake.getRemoteImageJSONReturns = struct {
		result1 []byte
		result2 int
		result3 error
	}{result1, result2, result3}
}

var _ docker_metadata_fetcher.DockerSession = new(FakeDockerSession)
